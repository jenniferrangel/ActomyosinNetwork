Parameters:
    *For now, we will define all parameters in main.cpp and externs.h
    *Once parameters are calibrated or we won't change them, we can move them to params.h 

*************************************************************************************************

Running:
    *For now, we run using make all which creates folders Animation and DataOutput and program
    *Inside DataOut create the folders:
        -Locations
        -Node_Data
        -Filament_Data
        -Network_Data

    *then we run this as:
        ./program Animation DataOutput/Locations DataOutput/Node_Data DataOutput/Filament_Data DataOutput/Network_Data
        |_______| |_______| |__________________| |__________________| |______________________| |_____________________|
         argv[0]   argv[1]       argv[2]                argv[3]                argv[4]                 argv[5]
    
    *WE NEED TO KEED THIS ORDER:
        -this is used in main.cpp

    *For now we run it as ./program Animation DataOutput/Locations DataOutput/Node_Data DataOutput/Filament_Data DataOutput/Network_Data

*************************************************************************************************

**************************************
**************************************
Actin Filaments
**************************************
**************************************

Actin filaments:
    * each actin filament has a plus (barbed) and pointed end. This could be the first or last node
        O--------O--------O          OR            O--------O--------O
	   (+)               (-)                      (-)               (+)
    
    * Notice that:
        -the first and last nodes do NOT have an ANGLE
        -the first node does NOT have a LEFT neighbor
        the last node nodes NOT have a RIGHT neighbor 

    Case 1: filament of 3 nodes connected by springs
                        angle
                O--------O--------O                
            No LEFT             No RIGHT
            angle = 0           angle = 0

    Case 2: filament of 4 nodes connected by springs
                    angle  angle
            O--------O--------O--------O              
        No LEFT                     No RIGHT
        angle = 0                   angle = 0

    Case 3: filament of 5 or more nodes connected by springs
                        angle  angle    angle
                O--------O--------O--------O--------O
            No LEFT                               No RIGHT
            angle = 0                             angle = 0


                    angle    angle    angle    angle
            O--------O--------O--------O--------O--------O
        No LEFT                                       No RIGHT
        angle = 0                                     angle = 0

*************************************************************************************************

Neighbors for first and last actin filament nodes:
    *the first node does not have a left neighbor, so we set the neighbor equal to the node
        * first node location = first node's left neighbor location
        *Ex: node = (0,0) then left neighbor = (0,0)

    *last node does not have a right neighbor, so we set the neighbors equal to the node
        * last node location = last node's right neighbor location
        *Ex: node = (2,0) then the right neighbor = (2,0)

*************************************************************************************************

Angles:
    *the FIRST and LAST nodes in a filament don't have an angle i.e. theta = 0
        * since the first node does not have a left neighbor and last node does not have a right neighbor, we set the neighbors equal to the nodes
        * first node location = first node's left neighbor location
        * last node location = last node's right neighbor location
        * this will give us an angle = 0 for first and last position

*************************************************************************************************
Bending force:
    *Notice that we have 3 recurring types of node
    *F^C: from being a center node:      angle
                                  O--------O--------O    
                                             ___                                                                                                ___
               k_b(theta_self - theta_equi) |        -r_left            cos(theta_self)r_left           r_right            cos(theta_self)r_right  |
      F^C =    ____________________________ | _____________________  +  _____________________  -  ____________________  +  _______________________ |
               sqrt(1-cos^2(theta_self))    | ||r_left|| ||r_right||          ||r_left||^2        ||r_right||||r_left||         ||r_right||^2      |
                                            |___                                                                                                ___|
                                             (__________  _________)    (_________  ________)     (_________  ________)    (__________  __________)
                                                        \/                        \/                        \/                        \/
                                                      term 1                    term 2                    term 3                    term 4
    

    *F^L: force comes from node's left neighbor:      angle
                                               O--------O--------O <--current node gets F^L   
                                             ___                                             ___
               k_b(theta_left - theta_equi) |        r_LL              cos(theta_left)(-r_left) |
      F^L =    ____________________________ | ____________________  -  ________________________ |
               sqrt(1-cos^2(theta_left))    | ||r_LL|| ||-r_left||          ||-r_left||^2       |
                                            |___                                             ___|
                                              (________  ________)     (___________  __________)
                                                       \/                          \/
                                                    term 1L                     term 2L


    *F^R: force comes from node's right neighbor:      angle
                     current node gets F^R -->  O--------O--------O    
                                              ___                                               ___
               k_b(theta_right - theta_equi) |        r_RR              cos(theta_right)(-r_right) |
      F^R =    ____________________________  | ____________________  -  __________________________ |
                sqrt(1-cos^2(theta_right))   | ||r_RR|| ||-r_right||          ||-r_right||^2       |
                                             |___                                               ___|
                                               (________  _________)    (___________  ____________)
                                                        \/                          \/
                                                     term 1R                     term 2R

    *F^C = 0 if:
        - theta_self = 0             since sqrt(1-cos^2(0)) = sqrt (1-1) = 0 and NO zero in denominator  
        - theta_self = theta_equi    numerator = 0 and sqrt (1-cos^2(pi)) = sqrt(1-(-1)) = 0 NO zero in denominator
        - if left_nbr == my_loc      this means it's the FIRST node which has NO angle
        - if right_nbr == my_loc     this means it's the LAST node which has NO angle

    *F^L = 0 if:
        - theta_left = 0                      since sqrt(1-cos^2(0)) = sqrt (1-1) = 0 and NO zero in denominator 
        - theta_left = theta_equi             numerator = 0 and sqrt (1-cos^2(pi)) = sqrt(1-(-1)) = 0 NO zero in denominator
        - if left_nbr == my_loc               this means it's the first node which has NO left neighbor
        - if left_nbr->left_nbr == left_nbr   this is the second node and the first node (left nbr) has no angle or left nbr                                        

    *F^R = 0 if:
        - theta_right = 0                           since sqrt(1-cos^2(0)) = sqrt (1-1) = 0 and NO zero in denominator  
        - theta_right = theta_equi                  numerator = 0 and sqrt (1-cos^2(pi)) = sqrt(1-(-1)) = 0 NO zero in denominator     
        - if right_nbr == my_loc                    this means it's the LAST node which has NO right neighbor
        - if right_nbr -> right_nbr == right_nbr    this is the second to last node who's right neighbor is the last node and the last node has NO angle and NO right nbr     
*************************************************************************************************

**************************************
**************************************
Non-muscle Myosin II Mini-filaments
**************************************
**************************************

Myosin:
    *each myosin mini-filament is composed of 2 nodes connected by a linear spring
            O--------O
       (node i)     (node j)
    *each node will have a neighboring_pair
        -node i's nbr pair is node j
        -node j's nbr pair is node i